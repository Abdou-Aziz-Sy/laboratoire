name: CI/CD Workflow (Staging)

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  build-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    
    # Configuration du service PostgreSQL pour les tests
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: taskhandler_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Options de santé pour garantir que PostgreSQL est prêt avant les tests
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: false

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build backend with Maven
        run: mvn clean package -DskipTests

      - name: Run backend tests with PostgreSQL
        run: mvn test -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/taskhandler_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

  build-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: false

      - name: Remove .gitmodules if exists
        run: |
          if [ -f .gitmodules ]; then
            echo ".gitmodules found. Removing it..."
            rm .gitmodules
            git rm --cached .gitmodules || true
          else
            echo "No .gitmodules file found."
          fi

      # Modification : Utiliser Node.js 20
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # <--- MODIFICATION ICI (passer de 18 à 20)
          always-auth: false

      # Revenir à npm ci est généralement préférable si possible
      # Si le passage à Node 20 résout le problème, vous pouvez retester avec npm ci
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install # Gardons npm install pour l'instant

      - name: Build React App
        working-directory: frontend
        run: npm run build

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false